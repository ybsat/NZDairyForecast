WPIpredict$mean
WPIpredict = forecast(WPI2, h = nahead)
forecasted_WPI = WPIpredict$mean
forecasted_WPI[1]
forecasted_WPI[2]
forecasted_WPI[10]
forecasted_WPI[30]
forecasted_WPI = WPIpredict$mean / 100
prd = predict(fit,n.ahead = nahead)
VARselect(series[,c(-1,-12)], lag.max = 10, type = c("const", "trend", "both", "none"))
fit = VAR(series[,c(-1,-12)],p=10,type = 'both')
summary(fit)
prd = predict(fit,n.ahead = nahead)
adj_pred = data.frame(Date = as.Date(character()),
Product = character(),
fcst = double(),
lower = double(),
upper = double(),
CI = double(),
stringsAsFactors = FALSE)
pos = nrow(series) %% freq + 1
to = pos + nahead - 1
for (i in 1:5){
lastdate = as.Date(series[nrow(series),1])
prod = products[i]
seas = seasonal_components[[i]]
seas = seas[pos:to]
tmp = prd$fcst[[i]]
for (j in 1:nahead){
lastdate = lastdate + freq_days
correction = seas[nahead]
fcst = tmp[j,1] + correction
lower = tmp[j,2] + correction
upper = tmp[j,3] + correction
CI = upper - fcst
tmpdf = data.frame(Date = lastdate, Product = prod, fcst = fcst, lower = lower, upper = upper, CI = CI, stringsAsFactors = FALSE)
adj_pred = rbind(adj_pred,tmpdf)
}
}
adj_pred = data.frame(Date = as.Date(character()),
Product = character(),
fcst = double(),
lower = double(),
upper = double(),
CI = double(),
stringsAsFactors = FALSE)
pos = nrow(series) %% freq + 1
to = pos + nahead - 1
for (i in 1:5){
lastdate = as.Date(series[nrow(series),1])
prod = products[i]
seas = seasonal_components[[i]]
seas = seas[pos:to]
tmp = prd$fcst[[i]]
for (j in 1:nahead){
lastdate = lastdate + freq_days
correction = seas[j]
fcst = tmp[j,1] + correction
lower = tmp[j,2] + correction
upper = tmp[j,3] + correction
CI = upper - fcst
tmpdf = data.frame(Date = lastdate, Product = prod, fcst = fcst, lower = lower, upper = upper, CI = CI, stringsAsFactors = FALSE)
adj_pred = rbind(adj_pred,tmpdf)
}
}
forecasted_WPI
View(series_org)
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
series = series[series$Date >= as.Date("2013-03-05"),]
series$QtySold = series$WMP_QtySold
series$QtySold[series$Date < as.Date("2014-01-07")] =  series$WMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$SMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$AMF_QtySold[series$Date < as.Date("2014-01-07")] +
series$BMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$BUT_QtySold[series$Date < as.Date("2014-01-07")]
series = series[,c(-3,-5,-7,-9,-11)]
rows = nrow(series)
for (i in 2:(rows-1)){
prev_val = series[i-1,12]
val = series[i,12]
next_val = series[i+1,12]
if (val == prev_val){
series[i,12] = (prev_val + next_val)/2
}
}
series_org = series
for (prd in products) {
name = paste(prd,'_Price',sep='')
series[name] =  series[name] / (series$World.Price..US...and.SDRs / 100)
}
fit = VAR(series[,c(-1,-12)],p=10,type = 'both')
summary(fit)
WPIts = ts(series$World.Price..US...and.SDRs,start = c(2013, 03),  deltat = 1/24)
WPIclean = tsclean(WPIts, replace.missing = TRUE, lambda = "auto")
WPI2 = auto.arima(WPIclean)
WPIpredict = forecast(WPI2, h = nahead)
forecasted_WPI = WPIpredict$mean / 100
forecasted_WPI
prd = predict(fit,n.ahead = nahead)
adj_pred = data.frame(Date = as.Date(character()),
Product = character(),
fcst = double(),
lower = double(),
upper = double(),
CI = double(),
stringsAsFactors = FALSE)
pos = nrow(series) %% freq + 1
to = pos + nahead - 1
for (i in 1:5){
lastdate = as.Date(series[nrow(series),1])
prod = products[i]
seas = seasonal_components[[i]]
seas = seas[pos:to]
tmp = prd$fcst[[i]]
for (j in 1:nahead){
lastdate = lastdate + freq_days
correction = 0
factor = 1
#correction = seas[j]
#factor = forecasted_WPI[j]
fcst = (tmp[j,1] + correction) * factor
lower = (tmp[j,2] + correction) * factor
upper = tmp[j,3] + correction
CI = upper - fcst
tmpdf = data.frame(Date = lastdate, Product = prod, fcst = fcst, lower = lower, upper = upper, CI = CI, stringsAsFactors = FALSE)
adj_pred = rbind(adj_pred,tmpdf)
}
}
predict(fit)
plot(series$WMP_Price)
1289.287
adj_pred = data.frame(Date = as.Date(character()),
Product = character(),
fcst = double(),
lower = double(),
upper = double(),
CI = double(),
stringsAsFactors = FALSE)
pos = nrow(series) %% freq + 1
to = pos + nahead - 1
for (i in 1:5){
lastdate = as.Date(series[nrow(series),1])
prod = products[i]
seas = seasonal_components[[i]]
seas = seas[pos:to]
tmp = prd$fcst[[i]]
for (j in 1:nahead){
lastdate = lastdate + freq_days
correction = seas[j]
factor = 1
#correction =
#factor = forecasted_WPI[j]
fcst = (tmp[j,1] + correction) * factor
lower = (tmp[j,2] + correction) * factor
upper = tmp[j,3] + correction
CI = upper - fcst
tmpdf = data.frame(Date = lastdate, Product = prod, fcst = fcst, lower = lower, upper = upper, CI = CI, stringsAsFactors = FALSE)
adj_pred = rbind(adj_pred,tmpdf)
}
}
forecasted_WPI
2.27 * 1294
adj_pred = data.frame(Date = as.Date(character()),
Product = character(),
fcst = double(),
lower = double(),
upper = double(),
CI = double(),
stringsAsFactors = FALSE)
for (i in 1:5){
lastdate = as.Date(series[nrow(series),1])
prod = products[i]
seas = seasonal_components[[i]]
seas = seas[pos:to]
tmp = prd$fcst[[i]]
for (j in 1:nahead){
lastdate = lastdate + freq_days
correction = seas[j]
factor = forecasted_WPI[j]
fcst = (tmp[j,1] + correction) * factor
lower = (tmp[j,2] + correction) * factor
upper = tmp[j,3] + correction
CI = upper - fcst
tmpdf = data.frame(Date = lastdate, Product = prod, fcst = fcst, lower = lower, upper = upper, CI = CI, stringsAsFactors = FALSE)
adj_pred = rbind(adj_pred,tmpdf)
}
}
plot(adj_pred)
tmp
adj_pred = data.frame(Date = as.Date(character()),
Product = character(),
fcst = double(),
lower = double(),
upper = double(),
CI = double(),
stringsAsFactors = FALSE)
for (i in 1:5){
lastdate = as.Date(series[nrow(series),1])
prod = products[i]
seas = seasonal_components[[i]]
seas = seas[pos:to]
tmp = prd$fcst[[i]]
for (j in 1:nahead){
lastdate = lastdate + freq_days
correction = seas[j]
factor = forecasted_WPI[j]
fcst = (tmp[j,1] + correction) * factor
lower = (tmp[j,2] + correction) * factor
upper = (tmp[j,3] + correction) * factor
CI = upper - fcst
tmpdf = data.frame(Date = lastdate, Product = prod, fcst = fcst, lower = lower, upper = upper, CI = CI, stringsAsFactors = FALSE)
adj_pred = rbind(adj_pred,tmpdf)
}
}
write.csv(series_org,"/Users/Yahia/Desktop/series.csv",row.names=FALSE)
wd()
wd
pwd
pwd()
dir()
all_index = read.csv('./data/price_indeces.csv')
all_index = read.csv('../data/price_indeces.csv')
View(all_index)
ts = ts(all_index$World.Price..US...and.SDRs,start=c(1986,01),freq = 24)
plot(ts)
series_bak = series
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
qplot(series$Date,series$World.Price..US...and.SDRs,xlab = "Date",ylab = "World Price Index",geom = c("point","line")) + ggtile('Dairy Products Commodity Price Index')
qplot(series$Date,series$World.Price..US...and.SDRs,xlab = "Date",ylab = "World Price Index",geom = c("point","line")) + ggtitle('Dairy Products Commodity Price Index')
qplot(series$Date,series$World.Price..US...and.SDRs,xlab = "Date",ylab = "Index Value",geom = c("point","line")) + ggtitle('Dairy Products Commodity Price Index')
rows = nrow(series)
for (i in 2:(rows-1)){
prev_val = series[i-1,12]
val = series[i,12]
next_val = series[i+1,12]
if (val == prev_val){
series[i,12] = (prev_val + next_val)/2
}
}
qplot(series$Date,series$World.Price..US...and.SDRs,xlab = "Date",ylab = "Index Value",geom = c("point","line")) + ggtitle('Dairy Products Commodity Price Index')
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
207 - 141
rows = nrow(series)
for (i in 8:(rows-1)){
prev_val = series[i-1,12]
val = series[i,12]
next_val = series[i+1,12]
if (val == prev_val){
series[i,12] = (prev_val + next_val)/2
}
}
qplot(series$Date,series$World.Price..US...and.SDRs,xlab = "Date",ylab = "Index Value",geom = c("point","line")) + ggtitle('Dairy Products Commodity Price Index')
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
col = 18
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
col = 18
for (i in 2:(rows-1)){
prev_val = series[i-1,col]
val = series[i,col]
next_val = series[i+1,col]
if (val == prev_val){
series[i,col] = (prev_val + next_val)/2
}
}
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
col = 17
for (i in 8:(rows-1)){
prev_val = series[i-1,col]
val = series[i,col]
next_val = series[i+1,col]
if (val == prev_val){
series[i,col] = (prev_val + next_val)/2
}
}
qplot(series$Date,series$World.Price..US...and.SDRs,xlab = "Date",ylab = "Index Value",geom = c("point","line")) + ggtitle('Dairy Products Commodity Price Index')
fit
summary(fit)
write.csv(adj_pred,"/Users/Yahia/Desktop/predictions.csv",row.names=FALSE)
curr_index = series$World.Price..US...and.SDRs
curr_index = data.frame(CPI = series$World.Price..US...and.SDRs)
View(curr_index)
write.csv(curr_index,"/Users/Yahia/Desktop/WPIpast.csv",row.names = FALSE)
curr_index = series[,c(1,17)]
write.csv(curr_index,"/Users/Yahia/Desktop/WPIpast.csv",row.names = FALSE)
forecasted_WPI
future_index = forecasted_WPI * 100
future_index
WPIpredict$level
WPIpredict$lower
WPIpredict$lower[1]
WPIpredict$lower[,:]
WPIpredict$lower[,1]
WPIpredict$lower[,2]
WPIpredict$upper[,2]
WPIpredict$upper
WPIpredict$mean
forecast_ci = data_frame(Date = adj_pred[1:20,1],lower = WPIpredict$lower[,2], fcst = WPIpredict$mean,upper = WPIpredict$upper[,2])
View(forecast_ci)
write.csv(forecast_ci,"/Users/Yahia/Desktop/WPIfuture.csv",row.names = FALSE)
impresp <- irf(fit)
plot(impresp)
plot(fevd(fit))
plot(fevd(fit))
par(mar=c(1,1,1,1))
plot(fevd(fit))
impresp <- irf(fit,n.ahead=20,response=["QtySold"])
impresp <- irf(fit,n.ahead=20,response=c("QtySold"))
plot(impresp)
scatter(series)
which(series$Date == as.Date("2018-11-06"))
nrow(series)
nrow(series) - cutat
cutat = which(series$Date == as.Date("2018-11-06"))
rowscut = nrow(series) - cutat
rowscut
series$World.Price..US...and.SDRs[1:3]
WPIts = ts(series$World.Price..US...and.SDRs[1:cutat],start = c(2013, 03),  deltat = 1/24)
WPIclean = tsclean(WPIts, replace.missing = TRUE, lambda = "auto")
WPI2 = auto.arima(WPIclean)
WPIpredict = forecast(WPI2, h = nahead + rowscut)
WPIpredict
WPIts
pairs(series)
pairs(series["WMP_Price","Participating.Biddes","Winning Bidders","Rounds","Date"])
temp = series["WMP_Price","Participating.Biddes","Winning Bidders","Rounds","Date"]
pairs(series[,c("WMP_Price","Participating.Biddes","Winning Bidders","Rounds","Date")])
pairs(series[,c("WMP_Price","Participating.Biddes","Winning.Bidders","Rounds","Date")])
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
series = series[series$Date >= as.Date("2013-03-05"),]
series$QtySold = series$WMP_QtySold
series$QtySold[series$Date < as.Date("2014-01-07")] =  series$WMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$SMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$AMF_QtySold[series$Date < as.Date("2014-01-07")] +
series$BMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$BUT_QtySold[series$Date < as.Date("2014-01-07")]
series = series[,c(-3,-5,-7,-9,-11)]
products = c('AMF','BMP','BUT','SMP','WMP')
freq = 24
freq_days = 15
strt = c(2013,03)
nahead = 20
rows = nrow(series)
#col = 12
col = 17
for (i in 8:(rows-1)){
prev_val = series[i-1,col]
val = series[i,col]
next_val = series[i+1,col]
if (val == prev_val){
series[i,col] = (prev_val + next_val)/2
}
}
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
series = series[series$Date >= as.Date("2013-03-05"),]
series$QtySold = series$WMP_QtySold
series$QtySold[series$Date < as.Date("2014-01-07")] =  series$WMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$SMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$AMF_QtySold[series$Date < as.Date("2014-01-07")] +
series$BMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$BUT_QtySold[series$Date < as.Date("2014-01-07")]
series = series[,c(-3,-5,-7,-9,-11)]
rows = nrow(series)
col = 12
#col = 17
for (i in 2:(rows-1)){
prev_val = series[i-1,col]
val = series[i,col]
next_val = series[i+1,col]
if (val == prev_val){
series[i,col] = (prev_val + next_val)/2
}
}
pairs(series[,c("WMP_Price","QtySold",Participating.Biddes","Winning.Bidders","Rounds","Date")])
pairs(series[,c("WMP_Price","QtySold","Participating.Biddes","Winning.Bidders","Rounds","Date")])
pairs(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")])
plotmatrix(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")])
library(ggplot2)
plotmatrix(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")])
ggpairs(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")])
library(GGally)
install.packages(GGally)
install.packages("GGally"")
)
))
""
install.packages("GGally")
ggpairs(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")])
library(GGally)
ggpairs(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")])
ggpairs(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")],title = "Correlation plots between key variables")
ggpairs(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")],title = "Correlation plots between key variables",xlab = "test",ylab="test")
ggpairs(series[,c("WMP_Price","QtySold","Participating.Bidders","Winning.Bidders","Rounds","Date")],title = "Correlation plots between key variables",columnLabels = c("WMP Price","Qty Sold","Participation","Winners","Rounds","Date"))
library("devtools")
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
series = series[series$Date >= as.Date("2013-03-05"),]
series$QtySold = series$WMP_QtySold
series$QtySold[series$Date < as.Date("2014-01-07")] =  series$WMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$SMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$AMF_QtySold[series$Date < as.Date("2014-01-07")] +
series$BMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$BUT_QtySold[series$Date < as.Date("2014-01-07")]
series = series[,c(-3,-5,-7,-9,-11)]
rows = nrow(series)
col = 12
#col = 17
for (i in 2:(rows-1)){
prev_val = series[i-1,col]
val = series[i,col]
next_val = series[i+1,col]
if (val == prev_val){
series[i,col] = (prev_val + next_val)/2
}
}
series_org = series
ts_WMP_pre = ts(series$WMP_Price, start = strt, frequency = freq)
cmp_WMP_pre = decompose(ts_WMP_pre)
plot(cmp_WMP_pre)
autoplot(cmp_WMP_pre)
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
ts_WMP_pre = ts(series$WMP_Price, start = strt, frequency = freq)
cmp_WMP_pre = decompose(ts_WMP_pre)
autoplot(cmp_WMP_pre)
autoplot(cmp_WMP_pre,labels = c("seasonal","trend","Noise"))
autoplot(cmp_WMP_pre,labels = c("Seasonal","Trend","Noise"))
autoplot(cmp_WMP_pre,labels = c("Seasonal","Trend","Noise")) + ggtitle("test")
autoplot(cmp_WMP_pre,labels = c("Seasonal","Trend","Noise")) + ggtitle("WMP Price Time Series Decomposition")
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
series = series[series$Date >= as.Date("2013-03-05"),]
series$QtySold = series$WMP_QtySold
series$QtySold[series$Date < as.Date("2014-01-07")] =  series$WMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$SMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$AMF_QtySold[series$Date < as.Date("2014-01-07")] +
series$BMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$BUT_QtySold[series$Date < as.Date("2014-01-07")]
series = series[,c(-3,-5,-7,-9,-11)]
rows = nrow(series)
col = 12
#col = 17
for (i in 2:(rows-1)){
prev_val = series[i-1,col]
val = series[i,col]
next_val = series[i+1,col]
if (val == prev_val){
series[i,col] = (prev_val + next_val)/2
}
}
ts_WMP_pre = ts(series$WMP_Price, start = strt, frequency = freq)
cmp_WMP_pre = decompose(ts_WMP_pre)
autoplot(cmp_WMP_pre,labels = c("Seasonal","Trend","Noise")) + ggtitle("WMP Price Time Series Decomposition")
ts_AMF_pre = ts(series$AMF_Price, start = strt, frequency = freq)
cmp_AMF_pre = decompose(ts_AMF_pre)
autoplot(cmp_AMF_pre,labels = c("Seasonal","Trend","Noise")) + ggtitle("AMF Price Time Series Decomposition")
summary(fit)
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
series$QtySold = series$WMP_QtySold
series$QtySold[series$Date < as.Date("2014-01-07")] =  series$WMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$SMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$AMF_QtySold[series$Date < as.Date("2014-01-07")] +
series$BMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$BUT_QtySold[series$Date < as.Date("2014-01-07")]
series = series[,c(-3,-5,-7,-9,-11)]
series = read.csv('../data/fullseries.csv')
series$Date <- as.Date(as.character(series$Date))
series$QtySold = series$WMP_QtySold
series$QtySold[series$Date < as.Date("2014-01-07")] =  series$WMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$SMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$AMF_QtySold[series$Date < as.Date("2014-01-07")] +
series$BMP_QtySold[series$Date < as.Date("2014-01-07")] +
series$BUT_QtySold[series$Date < as.Date("2014-01-07")]
series = series[,c(-3,-5,-7,-9,-11)]
for (i in 8:(rows-1)){
prev_val = series[i-1,col]
val = series[i,col]
next_val = series[i+1,col]
if (val == prev_val){
series[i,col] = (prev_val + next_val)/2
}
}
qplot(series$Date,series$WMP_Price,xlab = "Date",ylab = "Price",geom = c("point","line")) + ggtitle('WMP Nominal Price')
for (prd in products) {
name = paste(prd,'_Price',sep='')
series[name] =  series[name] / (series$World.Price..US...and.SDRs / 100)
}
qplot(series$Date,series$WMP_Price,xlab = "Date",ylab = "Price",geom = c("point","line")) + ggtitle('WMP Real Price Normalized by WPI')
seasonal_components = list()
for (i in 1:5) {
name = paste(products[i],'_Price',sep='')
temp_ts =  ts(series[name], start = strt, frequency = freq)
seasonal_components[[i]] = decompose(temp_ts)$seasonal
series[name] =  series[name] - seasonal_components[i]
}
qplot(series$Date,series$WMP_Price,xlab = "Date",ylab = "Price",geom = c("point","line")) + ggtitle('WMP Final Adjusted Price')
WPIts = ts(series$World.Price..US...and.SDRs[1:cutat],start = c(2013, 03),  deltat = 1/24)
WPIclean = tsclean(WPIts, replace.missing = TRUE, lambda = "auto")
WPI2 = auto.arima(WPIclean)
WPIpredict = forecast(WPI2, h = nahead + rowscut)
WPIpredict$mean
forecasted_WPI = WPIpredict$mean[rowscut:end] / 100
forecast_WPI
forecasted_WPI
